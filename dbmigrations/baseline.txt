Description: Baseline database schema
Created: 2013-07-27 09:19:42.70068 UTC
Depends: 
Apply: |

  --
  -- tables
  -- 

  CREATE TABLE context (
      id        SERIAL                  PRIMARY KEY
    , contextId CHARACTER VARYING (255) NOT NULL UNIQUE
                                          CHECK (char_length(contextId) > 0)
    , minx      DOUBLE PRECISION        NOT NULL
    , miny      DOUBLE PRECISION        NOT NULL
    , maxx      DOUBLE PRECISION        NOT NULL
    , maxy      DOUBLE PRECISION        NOT NULL
    , nx        INTEGER                 NOT NULL CHECK (nx > 1)
    , ny        INTEGER                 NOT NULL CHECK (ny > 1)
    , srid      INTEGER                 NOT NULL
                                          REFERENCES spatial_ref_sys (srid)
    , CONSTRAINT context_valid_box CHECK (minx < maxx AND miny < maxy)
    );
  
  CREATE TYPE store_state AS ENUM ('unparsed', 'ok', 'error');
  CREATE TYPE store_type AS ENUM ('fs', 'db');

  CREATE TABLE store_error (
      id       SERIAL                    PRIMARY KEY
    , ts       TIMESTAMP WITH TIME ZONE  NOT NULL DEFAULT NOW ()
    , message  TEXT                      NOT NULL
    );

  CREATE TABLE store (
      id       SERIAL                  PRIMARY KEY
    , storeId  CHARACTER VARYING (255) NOT NULL UNIQUE
                                        CHECK (char_length(storeId) > 0)
    , state    store_state             NOT NULL DEFAULT 'unparsed'
    , error_id INTEGER                 REFERENCES store_error (id)
    , type     store_type              NOT NULL
    );

  CREATE TABLE fs_store (
      id      INTEGER                 PRIMARY KEY REFERENCES store (id)
                                                  ON DELETE CASCADE
    , path    CHARACTER VARYING (255) NOT NULL
                                        CHECK (char_length(path) > 0)
    , module  CHARACTER VARYING (255) NOT NULL
                                        CHECK (char_length(module) > 0)
    , symbol  CHARACTER VARYING (255) NOT NULL
                                        CHECK (char_length(symbol) > 0)
    , UNIQUE (path, module, symbol)
    );

  CREATE TABLE db_store (
      id      INTEGER      PRIMARY KEY REFERENCES store (id)
                                       ON DELETE CASCADE
    , code    TEXT         NOT NULL
    );

  CREATE TABLE store_context (
      store_id   INTEGER NOT NULL REFERENCES store (id)
    , context_id INTEGER NOT NULL REFERENCES context (id)
    , auto       BOOLEAN NOT NULL DEFAULT FALSE
    , PRIMARY KEY (store_id, context_id)
    );


  --
  -- views
  --

  CREATE VIEW all_stores AS
    SELECT s.type
         , s.id
         , s.storeId
         , s.state
         , s.error_id
         , fs.path
         , fs.module
         , fs.symbol
         , db.code
      FROM store s LEFT OUTER JOIN fs_store fs ON (s.id = fs.id)
                   LEFT OUTER JOIN db_store db ON (s.id = db.id);

  --
  -- functions
  --

  CREATE FUNCTION context_change_notify () RETURNS trigger AS
  $BODY$
      BEGIN
          PERFORM pg_notify('context_change_notify', NEW.contextId);
          RETURN NULL;
      END; 
  $BODY$
    LANGUAGE plpgsql;

  CREATE FUNCTION validate_child_store () RETURNS trigger AS
  $BODY$
      DECLARE
          cur all_stores%ROWTYPE;
          type text;
      BEGIN
          type := split_part(TG_TABLE_NAME, '_', 1);
          SELECT * INTO cur FROM all_stores WHERE id=NEW.id;

          -- Check no other siblings with same id
          IF FOUND AND (cur.type :: text) != type THEN
            RAISE EXCEPTION 'Duplicated id % of type "%" or invalid type on '
                'store table', NEW.id, (cur.type :: text);
          END IF;

          RETURN NEW;
      END; 
  $BODY$
    LANGUAGE plpgsql;


  CREATE FUNCTION store_change_notify () RETURNS trigger AS
  $BODY$
      DECLARE
          cur store%ROWTYPE;
      BEGIN
          IF TG_OP IN ('INSERT', 'UPDATE') THEN
            EXECUTE 'SELECT * FROM store WHERE id = $1' INTO cur USING NEW.id;
          ELSIF TG_OP IN ('DELETE') THEN
            EXECUTE 'SELECT * FROM store WHERE id = $1' INTO cur USING OLD.id;
          END IF;
          PERFORM pg_notify('store_change', cur.storeId);
          RETURN NULL;
      END; 
  $BODY$
    LANGUAGE plpgsql;


  CREATE FUNCTION prune_orphan_stores (tabname regclass) RETURNS void AS
  $BODY$
      DECLARE
          type text;
      BEGIN
          type := split_part(tabname::text, '_', 1);
          EXECUTE
            'DELETE FROM store WHERE id IN ('
               'SELECT s.id FROM store s LEFT OUTER JOIN ' || tabname || ' o '
               'ON (o.id = s.id) WHERE o.id IS NULL AND s.type = CAST($1 AS store_type)'
            ')' USING type;
          RETURN;
      END; 
  $BODY$
    LANGUAGE plpgsql;

  CREATE FUNCTION prune_orphan_stores_tg () RETURNS trigger AS
  $BODY$
      BEGIN
        PERFORM prune_orphan_stores(TG_TABLE_NAME::regclass);
        RETURN NULL;
      END;
  $BODY$
    LANGUAGE plpgsql;


  
  --
  -- triggers
  --

  CREATE TRIGGER context_change_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON context FOR EACH ROW
    EXECUTE PROCEDURE context_change_notify ();


  CREATE TRIGGER store_change_trigger
    AFTER INSERT OR UPDATE OR DELETE
    ON store FOR EACH ROW
    EXECUTE PROCEDURE store_change_notify ();
  
  CREATE TRIGGER fs_store_validate_id_trigger
    BEFORE INSERT OR UPDATE
    ON fs_store FOR EACH ROW
    EXECUTE PROCEDURE validate_child_store ();

  CREATE TRIGGER fs_store_update_trigger
    AFTER INSERT OR UPDATE
    ON fs_store FOR EACH ROW
    EXECUTE PROCEDURE store_change_notify ();

  CREATE TRIGGER fs_store_delete_trigger
    AFTER DELETE
    ON fs_store FOR EACH STATEMENT
    EXECUTE PROCEDURE prune_orphan_stores_tg ();


  CREATE TRIGGER db_store_validate_id_trigger
    BEFORE INSERT OR UPDATE
    ON db_store FOR EACH ROW
    EXECUTE PROCEDURE validate_child_store ();

  CREATE TRIGGER db_store_update_trigger
    AFTER INSERT OR UPDATE
    ON db_store FOR EACH ROW
    EXECUTE PROCEDURE store_change_notify ();

  CREATE TRIGGER db_store_delete_trigger
    AFTER DELETE
    ON db_store FOR EACH STATEMENT
    EXECUTE PROCEDURE prune_orphan_stores_tg ();




Revert: |
  DROP VIEW all_stores;

  DROP TABLE store_context;
  DROP TABLE db_store;
  DROP TABLE fs_store;
  DROP TABLE store;
  DROP TABLE store_error;
  DROP TABLE context;

  DROP TYPE store_state;
  DROP TYPE store_type;

  DROP FUNCTION store_change_notify ();
  DROP FUNCTION prune_orphan_stores (regclass);
  DROP FUNCTION prune_orphan_stores_tg ();
  DROP FUNCTION context_change_notify ();
  DROP FUNCTION validate_child_store ();
